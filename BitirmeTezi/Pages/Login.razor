
@using Entitylayer.Concrete
@using BitirmeTezi.Authentication
@using DataAcceLayer.Concrete
@page "/login"
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

@layout LoginLayout
<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>CodePen - A Pen by Mohithpoojary</title>
  <link rel='stylesheet' href='https://use.fontawesome.com/releases/v5.2.0/css/all.css'>
<link rel='stylesheet' href='https://use.fontawesome.com/releases/v5.2.0/css/fontawesome.css'><link rel="stylesheet" href="./css/login.css">

</head>
<body>
<!-- partial:index.partial.html -->
<div class="container">
	<div class="screen">
		<div class="screen__content">
			<form class="login">
				<div class="login__field">
					<i class="login__icon fas fa-user"></i>
					<input @bind="model.UserName" type="text" class="login__input" placeholder="User name / Email">
				</div>
				<div class="login__field">
					<i class="login__icon fas fa-lock"></i>
					<input @bind="model.Password" type="password" class="login__input" placeholder="Password">
				</div>
				<button @onclick="Authenticate" class="button login__submit">
					<span class="button__text">Log In Now</span>
					<i class="button__icon fas fa-chevron-right"></i>
				</button>				
			</form>
			
		</div>
		<div class="screen__background">
			<span class="screen__background__shape screen__background__shape4"></span>
			<span class="screen__background__shape screen__background__shape3"></span>		
			<span class="screen__background__shape screen__background__shape2"></span>
			<span class="screen__background__shape screen__background__shape1"></span>
		</div>		
	</div>
</div>
<!-- partial -->
  
</body>
</html>


@code {


	private class Model{
		public string UserName { get; set; }
		public string Password { get; set; }
	}
	private Model model = new Model();
	private async Task Authenticate(){
		var userAccount = userAccountService.GetByUserName(model.UserName);
		if(userAccount==null || userAccount.Password!=model.Password){
			await js.InvokeVoidAsync("alert", "Invalid user name or password");
			navManager.NavigateTo("login", true);
			return;
		}
		else{
			var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
			await customAuthStateProvider.UpdateAuthenticationState(new UserSession{
			UserName = userAccount.UserName,
			Role = userAccount.Role

		});
			navManager.NavigateTo("/Admin", true);
			return;
		}
		
		
	}
}
